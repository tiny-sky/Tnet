// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sudoku.proto

#include "sudoku.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sudoku {
PROTOBUF_CONSTEXPR SudokuRequest::SudokuRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.checkerboard_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SudokuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SudokuRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SudokuRequestDefaultTypeInternal() {}
  union {
    SudokuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SudokuRequestDefaultTypeInternal _SudokuRequest_default_instance_;
PROTOBUF_CONSTEXPR SudokuResponse::SudokuResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.checkerboard_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.solved_)*/false} {}
struct SudokuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SudokuResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SudokuResponseDefaultTypeInternal() {}
  union {
    SudokuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SudokuResponseDefaultTypeInternal _SudokuResponse_default_instance_;
}  // namespace sudoku
static ::_pb::Metadata file_level_metadata_sudoku_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sudoku_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_sudoku_2eproto[1];

const uint32_t TableStruct_sudoku_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuRequest, _impl_.checkerboard_),
  0,
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, _impl_.solved_),
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, _impl_.checkerboard_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::sudoku::SudokuRequest)},
  { 8, 16, -1, sizeof(::sudoku::SudokuResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sudoku::_SudokuRequest_default_instance_._instance,
  &::sudoku::_SudokuResponse_default_instance_._instance,
};

const char descriptor_table_protodef_sudoku_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sudoku.proto\022\006sudoku\";\n\rSudokuRequest\022"
  "\031\n\014checkerboard\030\001 \001(\tH\000\210\001\001B\017\n\r_checkerbo"
  "ard\"\\\n\016SudokuResponse\022\023\n\006solved\030\001 \001(\010H\000\210"
  "\001\001\022\031\n\014checkerboard\030\002 \001(\tH\001\210\001\001B\t\n\007_solved"
  "B\017\n\r_checkerboard2G\n\rSudokuService\0226\n\005So"
  "lve\022\025.sudoku.SudokuRequest\032\026.sudoku.Sudo"
  "kuResponseB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_sudoku_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sudoku_2eproto = {
    false, false, 263, descriptor_table_protodef_sudoku_2eproto,
    "sudoku.proto",
    &descriptor_table_sudoku_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_sudoku_2eproto::offsets,
    file_level_metadata_sudoku_2eproto, file_level_enum_descriptors_sudoku_2eproto,
    file_level_service_descriptors_sudoku_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sudoku_2eproto_getter() {
  return &descriptor_table_sudoku_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sudoku_2eproto(&descriptor_table_sudoku_2eproto);
namespace sudoku {

// ===================================================================

class SudokuRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SudokuRequest>()._impl_._has_bits_);
  static void set_has_checkerboard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SudokuRequest::SudokuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sudoku.SudokuRequest)
}
SudokuRequest::SudokuRequest(const SudokuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SudokuRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.checkerboard_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.checkerboard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkerboard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_checkerboard()) {
    _this->_impl_.checkerboard_.Set(from._internal_checkerboard(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sudoku.SudokuRequest)
}

inline void SudokuRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.checkerboard_){}
  };
  _impl_.checkerboard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkerboard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SudokuRequest::~SudokuRequest() {
  // @@protoc_insertion_point(destructor:sudoku.SudokuRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SudokuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.checkerboard_.Destroy();
}

void SudokuRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SudokuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sudoku.SudokuRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.checkerboard_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SudokuRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string checkerboard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_checkerboard();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sudoku.SudokuRequest.checkerboard"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SudokuRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sudoku.SudokuRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string checkerboard = 1;
  if (_internal_has_checkerboard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkerboard().data(), static_cast<int>(this->_internal_checkerboard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sudoku.SudokuRequest.checkerboard");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_checkerboard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sudoku.SudokuRequest)
  return target;
}

size_t SudokuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sudoku.SudokuRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string checkerboard = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkerboard());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SudokuRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SudokuRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SudokuRequest::GetClassData() const { return &_class_data_; }


void SudokuRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SudokuRequest*>(&to_msg);
  auto& from = static_cast<const SudokuRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sudoku.SudokuRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_checkerboard()) {
    _this->_internal_set_checkerboard(from._internal_checkerboard());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SudokuRequest::CopyFrom(const SudokuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sudoku.SudokuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudokuRequest::IsInitialized() const {
  return true;
}

void SudokuRequest::InternalSwap(SudokuRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.checkerboard_, lhs_arena,
      &other->_impl_.checkerboard_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SudokuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sudoku_2eproto_getter, &descriptor_table_sudoku_2eproto_once,
      file_level_metadata_sudoku_2eproto[0]);
}

// ===================================================================

class SudokuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SudokuResponse>()._impl_._has_bits_);
  static void set_has_solved(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_checkerboard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SudokuResponse::SudokuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sudoku.SudokuResponse)
}
SudokuResponse::SudokuResponse(const SudokuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SudokuResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.checkerboard_){}
    , decltype(_impl_.solved_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.checkerboard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkerboard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_checkerboard()) {
    _this->_impl_.checkerboard_.Set(from._internal_checkerboard(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.solved_ = from._impl_.solved_;
  // @@protoc_insertion_point(copy_constructor:sudoku.SudokuResponse)
}

inline void SudokuResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.checkerboard_){}
    , decltype(_impl_.solved_){false}
  };
  _impl_.checkerboard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkerboard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SudokuResponse::~SudokuResponse() {
  // @@protoc_insertion_point(destructor:sudoku.SudokuResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SudokuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.checkerboard_.Destroy();
}

void SudokuResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SudokuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sudoku.SudokuResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.checkerboard_.ClearNonDefaultToEmpty();
  }
  _impl_.solved_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SudokuResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool solved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_solved(&has_bits);
          _impl_.solved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string checkerboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_checkerboard();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sudoku.SudokuResponse.checkerboard"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SudokuResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sudoku.SudokuResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool solved = 1;
  if (_internal_has_solved()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_solved(), target);
  }

  // optional string checkerboard = 2;
  if (_internal_has_checkerboard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkerboard().data(), static_cast<int>(this->_internal_checkerboard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sudoku.SudokuResponse.checkerboard");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkerboard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sudoku.SudokuResponse)
  return target;
}

size_t SudokuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sudoku.SudokuResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string checkerboard = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_checkerboard());
    }

    // optional bool solved = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SudokuResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SudokuResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SudokuResponse::GetClassData() const { return &_class_data_; }


void SudokuResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SudokuResponse*>(&to_msg);
  auto& from = static_cast<const SudokuResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sudoku.SudokuResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_checkerboard(from._internal_checkerboard());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.solved_ = from._impl_.solved_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SudokuResponse::CopyFrom(const SudokuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sudoku.SudokuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudokuResponse::IsInitialized() const {
  return true;
}

void SudokuResponse::InternalSwap(SudokuResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.checkerboard_, lhs_arena,
      &other->_impl_.checkerboard_, rhs_arena
  );
  swap(_impl_.solved_, other->_impl_.solved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SudokuResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sudoku_2eproto_getter, &descriptor_table_sudoku_2eproto_once,
      file_level_metadata_sudoku_2eproto[1]);
}

// ===================================================================

SudokuService::~SudokuService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SudokuService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sudoku_2eproto);
  return file_level_service_descriptors_sudoku_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SudokuService::GetDescriptor() {
  return descriptor();
}

void SudokuService::Solve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sudoku::SudokuRequest*,
                         ::sudoku::SudokuResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Solve() not implemented.");
  done->Run();
}

void SudokuService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_sudoku_2eproto[0]);
  switch(method->index()) {
    case 0:
      Solve(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sudoku::SudokuRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sudoku::SudokuResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SudokuService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sudoku::SudokuRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SudokuService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sudoku::SudokuResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SudokuService_Stub::SudokuService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SudokuService_Stub::SudokuService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SudokuService_Stub::~SudokuService_Stub() {
  if (owns_channel_) delete channel_;
}

void SudokuService_Stub::Solve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sudoku::SudokuRequest* request,
                              ::sudoku::SudokuResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sudoku
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sudoku::SudokuRequest*
Arena::CreateMaybeMessage< ::sudoku::SudokuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sudoku::SudokuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sudoku::SudokuResponse*
Arena::CreateMaybeMessage< ::sudoku::SudokuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sudoku::SudokuResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
